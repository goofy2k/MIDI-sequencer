#ifdef TEST_RECORDING  //see issue #6 NiCMidi repo


void main_proposal( void ) {
    ESP_LOGE(TAG,"Entering main_proposal of TEST_RECORDING example");
    ESP_LOGE(TAG,"CONDITIONAL----------------------------------CONDITIONAL  TEST_RECORDING");
    MIDISequencerGUINotifierText text_n;        // the AdvancedSequencer GUI notifier
    AdvancedSequencer sequencer(&text_n);       // an AdvancedSequencer (with GUI notifier)
    MIDIRecorder recorder(&sequencer);          // a MIDIRecorder //FCKX
    MIDIManager::OpenInPorts();          //FCKX!! 220103 must be closed at end
    MIDIManager::OpenOutPorts();            //must be closed at end
 
    MIDITimer::Wait(5000); 
    
    //could create a waiting loop for availability of port(s)
    //port->isPortOpen())
    /*
    while (true) {
    ESP_LOGE(TAG,"TEST IF PORT IS OPEN %d",MIDIManager::GetOutDriver(0)->IsPortOpen());
    }
    */

    ESP_LOGE(TAG,"PROCEEDING with TEST_RECORDING example (a connection should be available here, because tested before)");

    MIDIManager::AddMIDITick(&recorder);
    //text_n.SetSequencer(&sequencer);      // This is already called by AdvancedSequencer constructor

    MIDIClockTime t = sequencer.MeasToMIDI(15,0); //endMeasure, endBeat record the first 6 beats
    recorder.SetEndRecTime(t);
    recorder.EnableTrack(1); //FCKX

    recorder.SetTrackRecChannel(1,0);      // Can you set this? YES Otherwise set a specific channel
    //recorder.SetTrackRecChannel(1,-1);  
    recorder.Start();
    std::cout << "Recorder started\n";
   
    MIDITimer::Wait(60000);                 // Waits 15 secs: play something to record (remember to match
                                            // the input channel with the one set in SetTrackRecChannel)
    std::cout << "Calling recorder.Stop()\n";
    recorder.Stop();
    std::cout << "Recorder stopped\n";      //never reached after calling recorder.Stop()
    MIDITimer::Wait(1000); 
    std::cout << "Proceeding with next steps\n";
    sequencer.GoToZero();                   // rewinds
    sequencer.Start();
    std::cout << "Now the sequencer plays what you have recorded\n";

    while (sequencer.IsPlaying())         // waits until the sequencer finishes
        MIDITimer::Wait(50);
}
#endif
