TRACE 3X (NOTE ON + NOT OFF)

E (24128) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
GUI EVENT: Transport MEAS 9 BEAT 1
E (24618) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
E (24628) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
GUI EVENT: Transport MEAS 9 BEAT 2
E (25118) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
E (25128) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
GUI EVENT: Transport MEAS 9 BEAT 3
I (25528) FCKX_SEQ: MQTT_EVENT_DATA
E (25528) FCKX_SEQ_API: SEND MQTT INPUT VIA MIDIManager::GetInDriver(0)->HardwareMsgIn TEST DIRECT CALL (no callback)
W (25528) HardwareMsgIn: A sign of life from HardwareMsgIn (make it protected again in driver.h!!!)
I (25538) HardwareMsgIn: msg_bytes.at(0) 144 (0x90)
I (25548) HardwareMsgIn: msg_bytes.at(1) 47 (0x2F)
I (25548) HardwareMsgIn: msg_bytes.at(2) 127 (0x7F)
MQTT_In callback executed   I (25558) HardwareMsgIn: MSG BEFORE PROCESSOR        0 : Ch  0     NOTE ON         Note  47  Vel  127
I (25568) HardwareMsgIn: MSG AFTER PROCESSOR        0 : Ch  0     NOTE ON         Note  47  Vel  127
Got message, queue size: 1
W (25578) RECORDER_FCKX: port->ReadMessage 0
W (25588) RECORDER_FCKX: IsChannelMsg() TRUE
W (25588) RECORDER_FCKX: msg.GetChannel 0
W (25598) RECORDER_FCKX: LOC1 track 0
W (25598) RECORDER_FCKX: LOC2 track 0
W (25598) RECORDER_FCKX: GetTrack(i)->GetRecChannel 0
W (25608) RECORDER_FCKX: LOC3 track 0
W (25608) RECORDER_FCKX: LOC4 track 0

W (25618) RECORDER_FCKX: insert the event into the track 0
E (25618) InsertEvent: INSERT 1, GetEndTime() 0 < msg.GetTime() 4787
W (25628) RECORDER_FCKX: tell the driver to send this message 0
E (25638) NICMIDI DRIVER: MIDIOutDriver::OutputMessage

GATT procedure initiated: notify; att_handle=12
E (25648) APP_MAIN: DUMP ALL Tracks
W (25648) RECORDER_FCKX: LOC5 track 0
E (25658) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
Track  0   Name:
E (25668) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
GUI EVENT: Transport MEAS 10
GUI EVENT: Transport MEAS 10 BEAT 0
I (25938) FCKX_SEQ: MQTT_EVENT_DATA
E (25938) FCKX_SEQ_API: SEND MQTT INPUT VIA MIDIManager::GetInDriver(0)->HardwareMsgIn TEST DIRECT CALL (no callback)
W (25938) HardwareMsgIn: A sign of life from HardwareMsgIn (make it protected again in driver.h!!!)
I (25948) HardwareMsgIn: msg_bytes.at(0) 128 (0x80)
I (25958) HardwareMsgIn: msg_bytes.at(1) 47 (0x2F)
I (25958) HardwareMsgIn: msg_bytes.at(2) 0 (0x0)
MQTT_In callback executed   I (25968) HardwareMsgIn: MSG BEFORE PROCESSOR        0 : Ch  0     NOTE OFF        Note  47  Vel    0
    Type: I (25978) HardwareMsgIn: MSG AFTER PROCESSOR        0 : Ch  0     NOTE OFF        Note  47  Vel    0
Got message, queue size: 1
W (25998) RECORDER_FCKX: port->ReadMessage 0
W (25998) RECORDER_FCKX: IsChannelMsg() TRUE
W (26008) RECORDER_FCKX: msg.GetChannel 0
W (26008) RECORDER_FCKX: LOC1 track 0
W (26008) RECORDER_FCKX: LOC2 track 0
W (26018) RECORDER_FCKX: GetTrack(i)->GetRecChannel 0
W (26018) RECORDER_FCKX: LOC3 track 0
W (26028) RECORDER_FCKX: LOC4 track 0

W (26028) RECORDER_FCKX: insert the event into the track 0
E (26038) InsertEvent: INSERT 1, GetEndTime() 4787 < msg.GetTime() 4885
W (26048) RECORDER_FCKX: tell the driver to send this message 0
E (26048) NICMIDI DRIVER: MIDIOutDriver::OutputMessage


GATT procedure initiated: notify; att_handle=12
EMPTY
In port: MQTT_In
W (26058) RECORDER_FCKX: LOC5 track 0
E (26118) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
Out port: fckx_seq
Time shift: 0
Events in track:      1    End of track time: 0
E (26128) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
GUI EVENT: Transport MEAS 10 BEAT 1
I (26548) FCKX_SEQ: MQTT_EVENT_DATA
E (26548) FCKX_SEQ_API: SEND MQTT INPUT VIA MIDIManager::GetInDriver(0)->HardwareMsgIn TEST DIRECT CALL (no callback)
W (26548) HardwareMsgIn: A sign of life from HardwareMsgIn (make it protected again in driver.h!!!)
I (26558) HardwareMsgIn: msg_bytes.at(0) 144 (0x90)
I (26568) HardwareMsgIn: msg_bytes.at(1) 47 (0x2F)
I (26578) HardwareMsgIn: msg_bytes.at(2) 127 (0x7F)
MQTT_In callback executed   I (26578) HardwareMsgIn: MSG BEFORE PROCESSOR        0 : Ch  0     NOTE ON         Note  47  Vel  127
I (26588) HardwareMsgIn: MSG AFTER PROCESSOR        0 : Ch  0     NOTE ON         Note  47  Vel  127
Track Got message, queue size:  1   Name: 1
W (26608) RECORDER_FCKX: port->ReadMessage 0
W (26608) RECORDER_FCKX: IsChannelMsg() TRUE
W (26618) RECORDER_FCKX: msg.GetChannel 0
W (26618) RECORDER_FCKX: LOC1 track 0
W (26628) RECORDER_FCKX: LOC2 track 0
W (26628) RECORDER_FCKX: GetTrack(i)->GetRecChannel 0
W (26638) RECORDER_FCKX: LOC3 track 0
W (26638) RECORDER_FCKX: LOC4 track 0


W (26638) RECORDER_FCKX: insert the event into the track 0
E (26648) InsertEvent: INSERT 1, GetEndTime() 4885 < msg.GetTime() 5031
W (26658) RECORDER_FCKX: tell the driver to send this message 0
E (26658) NICMIDI DRIVER: MIDIOutDriver::OutputMessage


GATT procedure initiated: notify; att_handle=12
    Type: EMPTY
W (26678) RECORDER_FCKX: LOC5 track 0
E (26678) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
In port: MQTT_In
Out port: fckx_seq
E (26688) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
Time shift: 0
Events in track:      1GUI EVENT: Transport MEAS 10 BEAT 2
I (27058) FCKX_SEQ: MQTT_EVENT_DATA
E (27058) FCKX_SEQ_API: SEND MQTT INPUT VIA MIDIManager::GetInDriver(0)->HardwareMsgIn TEST DIRECT CALL (no callback)
W (27068) HardwareMsgIn: A sign of life from HardwareMsgIn (make it protected again in driver.h!!!)
I (27078) HardwareMsgIn: msg_bytes.at(0) 128 (0x80)
I (27078) HardwareMsgIn: msg_bytes.at(1) 47 (0x2F)
I (27088) HardwareMsgIn: msg_bytes.at(2) 0 (0x0)
MQTT_In callback executed   I (27088) HardwareMsgIn: MSG BEFORE PROCESSOR        0 : Ch  0     NOTE OFF        Note  47  Vel    0
I (27098) HardwareMsgIn: MSG AFTER PROCESSOR        0 : Ch  0     NOTE OFF        Note  47  Vel    0
           End of track time: Got message, queue size: 10W (27118) RECORDER_FCKX: port->ReadMessage 0
W (27118) RECORDER_FCKX: IsChannelMsg() TRUE
W (27128) RECORDER_FCKX: msg.GetChannel 0
W (27128) RECORDER_FCKX: LOC1 track 0
W (27138) RECORDER_FCKX: LOC2 track 0
W (27138) RECORDER_FCKX: GetTrack(i)->GetRecChannel 0
W (27148) RECORDER_FCKX: LOC3 track 0
W (27148) RECORDER_FCKX: LOC4 track 0

W (27158) RECORDER_FCKX: insert the event into the track 0
E (27158) InsertEvent: INSERT 1, GetEndTime() 5031 < msg.GetTime() 5156
W (27168) RECORDER_FCKX: tell the driver to send this message 0
E (27178) NICMIDI DRIVER: MIDIOutDriver::OutputMessage

GATT procedure initiated: notify; att_handle=12
W (27188) RECORDER_FCKX: LOC5 track 0
E (27188) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
Track  2   Name:
E (27198) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
    Type: EMPTY
GUI EVENT: Transport MEAS 10 BEAT 3
E (27618) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
In port: MQTT_In
Out port: fckx_seq
Time shift: 0
E (27628) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
GUI EVENT: Transport MEAS 11
GUI EVENT: Transport MEAS 11 BEAT 0
I (28088) FCKX_SEQ: MQTT_EVENT_DATA
E (28088) FCKX_SEQ_API: SEND MQTT INPUT VIA MIDIManager::GetInDriver(0)->HardwareMsgIn TEST DIRECT CALL (no callback)
W (28088) HardwareMsgIn: A sign of life from HardwareMsgIn (make it protected again in driver.h!!!)
I (28098) HardwareMsgIn: msg_bytes.at(0) 144 (0x90)
I (28108) HardwareMsgIn: msg_bytes.at(1) 47 (0x2F)
I (28108) HardwareMsgIn: msg_bytes.at(2) 127 (0x7F)
MQTT_In callback executed   I (28118) HardwareMsgIn: MSG BEFORE PROCESSOR        0 : Ch  0     NOTE ON         Note  47  Vel  127
I (28128) HardwareMsgIn: MSG AFTER PROCESSOR        0 : Ch  0     NOTE ON         Note  47  Vel  127
Got message, queue size: 1
E (28118) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
E (28148) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
Events in track:      1    End of track time: 0
GUI EVENT: Transport MEAS 11 BEAT 1
W (28168) RECORDER_FCKX: port->ReadMessage 0
W (28168) RECORDER_FCKX: IsChannelMsg() TRUE
W (28178) RECORDER_FCKX: msg.GetChannel 0
W (28178) RECORDER_FCKX: LOC1 track 0
W (28188) RECORDER_FCKX: LOC2 track 0
W (28188) RECORDER_FCKX: GetTrack(i)->GetRecChannel 0
W (28198) RECORDER_FCKX: LOC3 track 0
W (28198) RECORDER_FCKX: LOC4 track 0
W (28208) RECORDER_FCKX: insert the event into the track 0
E (28208) InsertEvent: INSERT 1, GetEndTime() 5156 < msg.GetTime() 5412
W (28218) RECORDER_FCKX: tell the driver to send this message 0
E (28228) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
W (28238) RECORDER_FCKX: LOC5 track 0
I (28498) FCKX_SEQ: MQTT_EVENT_DATA
E (28498) FCKX_SEQ_API: SEND MQTT INPUT VIA MIDIManager::GetInDriver(0)->HardwareMsgIn TEST DIRECT CALL (no callback)
W (28498) HardwareMsgIn: A sign of life from HardwareMsgIn (make it protected again in driver.h!!!)
I (28508) HardwareMsgIn: msg_bytes.at(0) 128 (0x80)
I (28518) HardwareMsgIn: msg_bytes.at(1) 47 (0x2F)
I (28518) HardwareMsgIn: msg_bytes.at(2) 0 (0x0)
MQTT_In callback executed   I (28528) HardwareMsgIn: MSG BEFORE PROCESSOR        0 : Ch  0     NOTE OFF        Note  47  Vel    0
I (28538) HardwareMsgIn: MSG AFTER PROCESSOR        0 : Ch  0     NOTE OFF        Note  47  Vel    0
Track Got message, queue size:  3   Name:
1
W (28558) RECORDER_FCKX: port->ReadMessage 0
W (28558) RECORDER_FCKX: IsChannelMsg() TRUE
W (28568) RECORDER_FCKX: msg.GetChannel 0
W (28568) RECORDER_FCKX: LOC1 track 0
W (28568) RECORDER_FCKX: LOC2 track 0
W (28578) RECORDER_FCKX: GetTrack(i)->GetRecChannel 0
W (28578) RECORDER_FCKX: LOC3 track 0
W (28588) RECORDER_FCKX: LOC4 track 0
W (28588) RECORDER_FCKX: insert the event into the track 0
E (28598) InsertEvent: INSERT 1, GetEndTime() 5412 < msg.GetTime() 5499
W (28608) RECORDER_FCKX: tell the driver to send this message 0
E (28608) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
GATT procedure initiated: notify; att_handle=12
    Type: EMPTY
W (28618) RECORDER_FCKX: LOC5 track 0
E (28628) NICMIDI DRIVER: MIDIOutDriver::OutputMessage
G