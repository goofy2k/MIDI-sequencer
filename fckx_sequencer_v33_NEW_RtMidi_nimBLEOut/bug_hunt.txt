I am hunting a bug that causes "loss of midi messages" or, maybe better, "unhandled midi messages". They may very well have to do with my implementation of midi input,  midi_uitput or thru.cpp. Still I post this here as you may have useful advice or (less expected) it helps to improve your code.

High level characteristics:

Missing note-off or note-on commands on my synth board. 

- On the synth-board side a missing note-off is noticable because the last note started keeps on playing. 
- A missing note-on is recognizable when a note-off arrives for the corresponding pitch. The (polyphonic) synth software reports with "Playing pitch = 42 not found" that the voice with that pitch can not be switched off (because it was not started). 


On the NicMidi side the fingerprints of the errors are different. Here I describe only the missing note-off case as it is easier to detect (by listening) and reproduce (in the midi-thru example that accepts key-presses over Midi In (implemented with MQTT). 

MISSING NOTE-OFF

These are the very last log lines. They all come from driver.cpp.

I (52701) HardwareMsgIn (driver.cpp): !msg.IsNoOp BEFORE PROCESSOR        0 : Ch  0     NOTE OFF        Note  41  Vel    0
I (52711) HardwareMsgIn (driver.cpp): !msg.IsNoOp NO action by PROCESSOR required
E (52711) HardwareMsgIn (driver.cpp): added message to in_queue
Got message, queue size: 2  

No further logs until a next command is sent. This means that in the next calls of the thru component an empty queue is detected. Otherwise thru would create a "Message found" log and some more during handling of the message 


My interpretation / analysis: 

- The note-on and note-off are injected into the input queue. 
- Note-on is properly handled by thru (the MIDIThru::TickProc logs appear, and the command arrives at the synth) 
- The note-off arrives at the NiCMidi input BEFORE the input queue with the key-on is flushed. This leads to a queue size of 2.
- The note-off arrives AFTER handling the queue in MIDIThru, otherwise it would have been handled
- After MidiThru completes, the queue is flushed, leading to a loss of the unhandled key-off

In summary, my guess is that NiCMidi is interupted AFTER starting the handler loop in MIDIThru (thus handling the queue with only one message), but BEFORE flushing the queue. 

It may well be possible that when a message arrives over MQTT, the MQTT event interrupts the thru tickproc.  I don't know (yet) which mechanism is used by the MQTT client and if the locking  in the  MIDIThru::TickProc with    proc_lock.lock();
   MIDIInDriver* in_driver = MIDIManager::GetInDriver(in_port);
   in_driver->LockQueue();
is suffiecient.  
 




